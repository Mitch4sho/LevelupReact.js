{"version":3,"sources":["movies/Movie.js","Filter.js","movies/MoviesList.js","movies/MovieDetail.js","App.js","serviceWorker.js","index.js"],"names":["Movie","movie","config","to","id","images","base_url","src","poster_path","alt","title","Filter","setFilter","filter","placeholder","onChange","e","target","value","MoviesList","useState","movies","setMovies","setConfig","getMovies","a","fetch","API_URL","res","json","results","console","error","getConfig","CONFIG_URL","useEffect","className","toLowerCase","includes","map","key","MovieDetail","useParams","setMovie","getMovie","BASE_URL","newMovie","IMAGE_URL","backdrop_path","overview","genres","genre","name","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.25194e7e.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\"\nimport { Link } from \"react-router-dom\";\n\nexport function Movie({ movie, config }) {\n  return (\n    <Link to={`/movie/${movie.id}`}>\n        <li>\n          {config.images?.base_url && (\n            <img\n              src={config.images.base_url+`w342`+movie.poster_path}\n              alt={movie.title + \" Poster\"}\n            />\n          )}\n        </li>\n    </Link>\n  )\n}\n\n//Proptypes this makes debugging a lot easier!\n\nMovie.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n  }).isRequired,\n  config: PropTypes.shape({\n    images: PropTypes.shape ({\n      base_url: PropTypes.string.isRequired,\n    })\n\n  })\n};","import React from \"react\";\nimport PropTypes from \"prop-types\"\n\nexport function Filter({ setFilter, filter }) {\n  return (\n    <label>\n      <input\n        placeholder=\"Search\"\n        onChange={(e) => setFilter(e.target.value)}\n        value={filter}\n      />\n    </label>\n  );\n}\n// Below is a examples of how proptypes are expected and they are just a way ot \n// set strict rules on certain props or values like accepting strings or numbers \n\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired\n};","import React, { useState, useEffect } from \"react\";\nimport { Movie } from \"./Movie\";\nimport { Filter } from \"../Filter\";\n\n\n\nconst API_URL =\n  \"https://api.themoviedb.org/3/discover/movie?language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&api_key=\";\nconst CONFIG_URL = \"https://api.themoviedb.org/3/configuration?api_key=\";\nexport function MoviesList() {\n  const [filter, setFilter] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  const [config, setConfig] = useState({});\n\n  //getting the movie data from the API\n  const getMovies = async () => {\n    try {\n      const res = await fetch(API_URL + process.env.REACT_APP_MOVIE_API);\n      const movies = await res.json();\n      setMovies(movies.results);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const res = await fetch(CONFIG_URL + process.env.REACT_APP_MOVIE_API);\n      const config = await res.json();\n      setConfig(config);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  useEffect(() => {\n    getConfig();\n    getMovies();\n  }, []);\n\n  return (\n    <div>\n      <Filter filter={filter} setFilter={setFilter} />\n      <ul className=\"movieList\">\n        {movies\n          .filter((movie) =>\n            movie.title.toLowerCase().includes(filter.toLowerCase())\n          )\n          .map((movie) => (\n            <Movie key={movie.id} config={config} movie={movie} />\n          ))}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\n\nconst BASE_URL  = \"https://api.themoviedb.org/3/movie/\";\nconst API_KEY = \"?api_key=\";\n\nconst IMAGE_URL = \"https://image.tmdb.org/t/p/\";\nconst BACKDROP_SIZE = \"original\";\nconst POSTER_SIZE = \"w342\";\n\nexport function MovieDetail() {\n  const { id } = useParams();\n  const [movie, setMovie] =  useState({});\n\n  const getMovie = async () => {\n    try {\n      const res = await fetch(\n        BASE_URL + id + API_KEY + process.env.REACT_APP_MOVIE_API\n      );\n      const newMovie = await res.json();\n      setMovie(newMovie);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  useEffect(() => {\n    getMovie();\n  });\n    \n  if (!movie.title) return null\n  \n  return (\n    <div>\n      <img\n        className = \"backdrop\"\n        src={IMAGE_URL + BACKDROP_SIZE + movie.backdrop_path}\n        alt={movie.title + \" Backdrop\"}\n      />\n      <div className = \"detailDetails\">\n        <img\n          className = \"detailPoster\"\n          src={IMAGE_URL + POSTER_SIZE + movie.poster_path}\n          alt={movie.title + \" Poster\"}\n        />\n        <div>\n          <h1>{movie.title}</h1>\n          <h3>{movie.overview}</h3>\n          <ul>\n            {movie.genres.map((genre) => (\n              <li key={genre.id}>{genre.name}</li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { MoviesList } from \"./movies/MoviesList\";\nimport { MovieDetail } from \"./movies/MovieDetail\";\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/movie/:id\">\n            <MovieDetail />\n          </Route>\n          <Route path=\"/\">\n            <MoviesList />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}